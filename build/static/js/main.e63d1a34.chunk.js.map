{"version":3,"sources":["services/actions.js","components/sort-filter-panel/sort-filter-panel.js","components/sort-filter-panel/index.js","components/app/App.js","components/app/index.js","serviceWorker.js","services/reducers/index.js","services/reducers/reducers.js","index.js","services/configure-store.js"],"names":["listIsLoading","bool","type","isLoading","langIsLoading","SortFilterPanel","onChangeFilter","e","_this","props","changeFilter","target","value","this","getLanguages","console","log","languages","map","item","react_default","a","createElement","key","name","className","htmlFor","onChange","onClick","changeSort","Component","connect","state","list","List","Languages","error","LanguageHasErrored","loading","LanguageIsLoading","dispatch","url","fetch","then","response","ok","Error","statusText","json","items","langLoaded","catch","hasErrored","lang","App","getList","date","substring","replace","language","sort","newList","filter","b","Date","transformDate","updated_at","score","_this2","_this$props","elements","sortFilterItems","id","owner","login","href","html_url","components_sort_filter_panel","ListHasErrored","ListIsLoading","ChangeFilter","ChangeSort","listLoaded","Boolean","window","location","hostname","match","combineReducers","arguments","length","undefined","action","initialState","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","render","es","app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e63d1a34.chunk.js","sourcesContent":["\r\nexport function listHasErrored(bool) {\r\n    return {\r\n        type: 'LIST_HAS_ERRORED',\r\n        hasErrored: bool\r\n    };\r\n}\r\n\r\nexport function listIsLoading(bool) {\r\n    return {\r\n        type: 'LIST_IS_LOADING',\r\n        isLoading: bool\r\n    };\r\n}\r\n\r\nexport function listLoaded(items) {\r\n    return {\r\n        type: 'LIST_LOADED',\r\n        items\r\n    };\r\n}\r\n\r\nexport function langHasErrored(bool) {\r\n  return {\r\n      type: 'LANG_HAS_ERRORED',\r\n      hasErrored: bool\r\n  };\r\n}\r\n\r\nexport function langIsLoading(bool) {\r\n  return {\r\n      type: 'LANG_IS_LOADING',\r\n      isLoading: bool\r\n  };\r\n}\r\n\r\nexport function langLoaded(items) {\r\n  return {\r\n      type: 'LANG_LOADED',\r\n      items\r\n  };\r\n}\r\n\r\nexport function getNewFilter(value) {\r\n  return {\r\n      type: 'FILTER_CHANGED',\r\n      value\r\n  }  \r\n}\r\n\r\nexport function getNewSort() {\r\n  return {\r\n      type: 'SORT_CHANGED',\r\n  }  \r\n}\r\n\r\nexport function getList(url) {\r\n\r\n    return (dispatch) => {\r\n      dispatch(listIsLoading(true));\r\n        \r\n    fetch(url)\r\n     .then(response => {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n\r\n      dispatch(listIsLoading(false));\r\n\r\n      return response;\r\n      \r\n    })\r\n      .then(response => response.json())\r\n      .then(items => dispatch(listLoaded(items)))\r\n      .catch(() => dispatch(listHasErrored(true)));\r\n    };\r\n  }\r\n\r\n  export function getLanguages(url) {\r\n\r\n    return (dispatch) => {\r\n      dispatch(langIsLoading(true));\r\n        \r\n    fetch(url)\r\n     .then(response => {\r\n      if (!response.ok) {\r\n        throw Error(response.statusText);\r\n      }\r\n\r\n      dispatch(langIsLoading(false));\r\n\r\n      return response;\r\n      \r\n    })\r\n      .then(response => response.json())\r\n      .then(items => dispatch(langLoaded(items)))\r\n      .catch(() => dispatch(langHasErrored(true)));\r\n    };\r\n  }\r\n\r\n","import React, {Component} from 'react'\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nimport { getLanguages, getNewFilter, getNewSort } from '../../services/actions';\r\n\r\nclass SortFilterPanel extends Component {\r\n\r\n    componentDidMount() {\r\n       this.props.getLanguages('https://api.github.com/languages');\r\n    }\r\n\r\n    onChangeFilter = (e) => {\r\n        this.props.changeFilter(e.target.value);\r\n    }\r\n\r\n    render() {\r\n\r\n        console.log('sort panel props is ', this.props);\r\n\r\n        const languages = this.props.languages.map(item => {\r\n            return <option key={item.name} value={item.name}>{item.name}</option> })\r\n\r\n        return (\r\n            <div>\r\n\r\n            <div className=\"form-group col-md-6\">\r\n                <label className=\"col-form-label\" htmlFor=\"#language\">Language</label>\r\n                <select onChange={this.onChangeFilter} className=\"custom-select mr-sm-2\" name=\"Language\">\r\n                    <option key=\"0\" value=\"\">All</option>\r\n                    {languages}\r\n                </select>\r\n            </div>\r\n\r\n            <div className=\"form-group col-md-6\">\r\n                <div className=\"custom-control custom-checkbox my-1 mr-sm-2\">\r\n                    \r\n                    <label className=\"form-check-label\" htmlFor=\"#sort\">\r\n                        <input type=\"checkbox\" className=\"form-check-input\" name=\"sort\"\r\n                            onClick={this.props.changeSort}/>\r\n                        \r\n                        Sort by date</label>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        list: state.List,\r\n        languages: state.Languages,\r\n        error: state.LanguageHasErrored,\r\n        loading: state.LanguageIsLoading,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch) => {\r\n    return {\r\n       getLanguages: (url) => dispatch(getLanguages(url)),\r\n       changeFilter: (lang) => dispatch(getNewFilter(lang)),\r\n       changeSort: () => dispatch(getNewSort())\r\n    };\r\n  };\r\n\r\n  export default connect(mapStateToProps, mapDispatchToProps)(SortFilterPanel);","import SortFilterPanel from './sort-filter-panel';\r\n\r\nexport default SortFilterPanel;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { connect } from 'react-redux';\n\nimport { getList } from '../../services/actions';\nimport SortFilterPanel from '../sort-filter-panel';\n\nclass App extends Component {\n  \n  componentDidMount() {\n    this.props.getList('https://api.github.com/search/repositories?q=sort=stars&order=desc');\n  }\n\n  transformDate(date) {\n    let newdate = date.substring(0,10).replace(/(\\d+)-(\\d+)-(\\d+)/, '$2/$3/$1');\n    return newdate;\n  }\n\n  sortFilterItems(list, language, sort) {\n    let newList = [];\n\n    if (language === \"\") { \n        newList = list; \n    }\n    else {\n        newList = list.filter(item => item.language === language);\n    }\n    \n    if (sort) {\n      newList = newList.sort((a,b) => {\n        const DateA = new Date(this.transformDate(a.updated_at));\n        const DateB = new Date(this.transformDate(b.updated_at));\n\n              \n      return DateA - DateB;\n        });\n    }\n    else\n    {\n      newList = newList.sort((a,b) => b.score - a.score);\n    }\n\n    return newList;\n  }\n  \n  render() {\n\n    const { list, filter, sort } = this.props;\n    \n    console.log(this.props);\n\n    const visibleItems = this.sortFilterItems(list, filter, sort);\n    \n    const elements = visibleItems.map((item) => {\n      \n      return (\n      <tr key={item.id}>\n          <td>{item.name}</td>\n          <td>{item.owner.login}</td>\n          <td><a href={item.html_url}>{item.html_url}</a></td>\n          <td>{item.score}</td>\n          <td>{item.language}</td>\n          <td>{this.transformDate(item.updated_at)}</td>            \n      </tr>\n      );\n      });\n\n    return (\n      <div className=\"App\">\n        <h2 className=\"text-center\">Repositories</h2>\n        <SortFilterPanel />\n        <div className=\"mt-4\">\n          <table className=\"table\">\n            <thead className=\"thead-dark\">\n              <tr>\n                <th>Repository Name</th>\n                <th>User Login</th>\n                <th>Link</th>\n                <th>Rating</th>\n                <th>Language</th>\n                <th>Last refresh date</th>\n              </tr>  \n            </thead>\n            <tbody>\n              {elements}\n            </tbody> \n          </table>\n        </div>\n      </div>\n    );\n  }\n\n\n};\n\nconst mapStateToProps = (state) => {\n  return {\n      list: state.List,\n      error: state.ListHasErrored,\n      loading: state.ListIsLoading,\n      filter: state.ChangeFilter,\n      sort: state.ChangeSort      \n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n      getList: (url) => dispatch(getList(url))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import App from './App';\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport { List, ListHasErrored, ListIsLoading, \r\n            Languages, LanguageHasErrored, LanguageIsLoading,\r\n            ChangeFilter, ChangeSort } from './reducers';\r\n\r\nexport default combineReducers({\r\n    List,\r\n    ListHasErrored,\r\n    ListIsLoading,\r\n    Languages,\r\n    LanguageHasErrored,\r\n    LanguageIsLoading,\r\n    ChangeFilter,\r\n    ChangeSort\r\n});","\r\nexport function ListHasErrored(state = false, action) {\r\n  switch (action.type) {\r\n      case 'LIST_HAS_ERRORED':\r\n          return action.hasErrored;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function ListIsLoading(state = false, action) {\r\n  switch (action.type) {\r\n      case 'LIST_IS_LOADING':\r\n          return action.isLoading;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function List(state = [], action) {\r\n  switch (action.type) {\r\n      case 'LIST_LOADED':\r\n          return action.items.items;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function LanguageHasErrored(state = false, action) {\r\n  switch (action.type) {\r\n      case 'LANG_HAS_ERRORED':\r\n          return action.hasErrored;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function LanguageIsLoading(state = false, action) {\r\n  switch (action.type) {\r\n      case 'LANG_IS_LOADING':\r\n          return action.isLoading;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function Languages(state = [], action) {\r\n  switch (action.type) {\r\n      case 'LANG_LOADED':\r\n          return action.items;\r\n\r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function ChangeFilter(state=\"\", action) {\r\n  switch (action.type) {\r\n      case 'FILTER_CHANGED':\r\n          return action.value;\r\n      \r\n      default:\r\n          return state;\r\n  }\r\n}\r\n\r\nexport function ChangeSort(state=false, action) {\r\n  switch (action.type) {\r\n      case 'SORT_CHANGED':\r\n          return !state;\r\n      \r\n      default:\r\n          return state;\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport configureStore from './services/configure-store';\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\ndocument.getElementById('root'));\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from '../services/reducers';\r\n\r\nexport default function configureStore(initialState) {\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n        applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}